{"./":{"url":"./","title":"Introduction","keywords":"","body":" 报告问题 · 功能需求 一个轻量清晰,容易上手的,数据/投研/交易集成框架 🐼QuantHub简介(持续更新调整中ing) 首先 QuantHub 是个圈地自萌的小社区,里面的人个个是人才,长得好看(❤´艸｀❤),说话又好听。 其次 quanthub 是个体验感很好的量化集成框架,目前开源的是实际生产环境的一个简化版本,几乎涵盖了（数据/投研/组合/交易/分析）所有环节。 它足够简单,足够自由,你可以像搭积木一样,搭配自己喜欢的技术栈,让它成为最适合你的开发利器！ 它的架构肯定是没有问题的,几乎可以说是很标准了,搭配合适的技术栈,是可以成为一个企业级的框架的； 最后,感谢这两年多来,不断支持 QuantHub项目成长,给予帮助和建议的朋友🍑🍑🍑~ 项目地址： https://gitee.com/jiangtiantu/quanthub 文档地址： http://jiangtiantu.gitee.io/quanthub ✨ 工具特性 自由,自由,还是***D 自由,你可以随心所欲的魔改 DIY,可扩展,可升级； 简单,简单,足够轻松上手的简单,这是一整套完整的体系,来源于实际的各生产环节； 💻 项目结构 quanthub包含以下几个部分（请原谅我是个取名废材,o(////▽////)q）： datahub 这是一个落地数据库,你可以直接把你想要的数据放到本地,并通过data_sync进行每日同步更新。 储存形式任意,你可以按照自己的喜好进行选择,目前我实际生产环境用的clickhouse+parquet+duckdb； 该数据库包含：股票,期货,期权,基金的历史行情数据,以及相应的实时数据； 数据的ETL相关代码,请查阅plutus.data 模块 该数据库还包含,各种另类数据和基本面数据,具体内容,请查看datahub 文档； factorhub 这是落地一个因子数据库,可以是你喜欢的任意形式,为方便上传,该项目采用的parquet文件存储； 也是一个因子回测框架,包含截面因子回测和时序因子回测两大类； 投研环境下,相关回测逻辑,请阅读plutus.research模块 生产环境下,批量计算因子,请查看plutus.factor模块 因子面板(更新中); 一个因子交换和交流平台(目前是以微信群的方式),有想加入的小伙伴,请私下联系； 具体内容说明,请查看factorhub文档； signalhub 这是落地一个信号数据库,是对因子数据的进一步处理,可以是你喜欢的任意形式,为方便上传,该项目采用的parquet文件存储； 生产环境下,批量计算信号,请查看plutus.signal 模块 交易信号面板(更新中); 大部分人可能用不到这个模块,如果不需要篮子交易的话； 具体内容说明,请查看signalhub文档； positionhub 这是落地一个账户持仓数据库,是对信号数据的进一步处理,可以是你喜欢的任意形式； 生产环境下,批量计算信号,请查看plutus.position模块 大部分人可能用不到这个模块,如果不需要篮子交易,或者需要多账户交易的话； 具体内容说明,请查看positionhub文档； researhub 投研平台,本质是jupyter lab； 我对该模块的定义是存放,我们数据分析的各类notebook文件,以及各种测试代码； 具体内容说明,请查看researhub文档；paperhub 一个放资料的地方,包含各类视频和各种PDF等等文件,几乎你能在互联网上找到的所有可能有点用的学习资料 资料总大小大概200g 左右,分类如下： 股票 基金 期货 期权 资产配置 高频 债券 具体内容说明,请查看paperhub文档； tradehub 关于交易,我们的理念是,不同标的,不同策略,可能需要的交易框架是不一样的。你喜欢的,适合的就是最好的； 所以,我们直接集成了一些优秀的开源交易框架： wondertrader ctpbee fk_ctp 期待能与更多的开源框架作者建立联系,感谢你们为开源社区做出的贡献~ 具体内容说明,请查看tradehub文档；jobhub 一个方便同行进行招聘与求职的板块 目前是和以下金融ip小伙伴,同步更新,微信公众号,知乎等等自媒体； FOF小菜鸟； 期待能与更多的金融自媒体和IP建立联系 具体内容说明,请查看jobhub文档； gamehub 一个业内朋友一起打游戏的板块； 具体内容说明,请查看gamehub文档； lovehub 一个征婚交友的地方； 具体内容说明,请查看lovehub文档； plutus（核心） plutus是另外一个小伙伴给起的名字，翻译为财神爷，哈哈，是不是凭这个就该关注下了呢 后台框架,该项目核心,分为以下模块和文件: ├─data │ │ data_base.py │ │ __init__.py │ │ │ ├─data_backup │ │ backup_data.py │ │ __init__.py │ │ │ ├─data_download │ │ download_base.py │ │ download_from_bs.py │ │ download_from_ctp.py │ │ download_from_sge.py │ │ __init__.py │ │ │ ├─data_prepare │ │ prepare_base.py │ │ prepare_center_data.py │ │ prepare_his_parquet.py │ │ prepare_rt_redis.py │ │ __init__.py │ │ │ ├─data_pretreat │ │ pretreat_base.py │ │ pretreat_from_bs.py │ │ pretreat_from_diy.py │ │ __init__.py │ │ │ ├─data_process │ │ process_base.py │ │ process_cn_future_index.py │ │ process_cn_future_md.py │ │ process_cn_future_master.py │ │ process_cn_future_trade.py │ │ process_cn_stock_master.py │ │ process_cn_stock_trade.py │ │ process_sg_future_md.py │ │ __init__.py │ │ │ ├─data_sync │ │ __init__.py │ │ sync_base.py │ │ sync_data.py │ │ │ ├─data_update │ │ update_base.py │ │ update_data.py │ │ __init__.py │ │ │ └─data_wrangle │ resample_data.py │ standard_data.py │ __init__.py │ ├─execution │ cal_factor.bat │ cal_signal.bat │ run_prepare_data.bat │ run_update_data.bat │ ├─factor │ │ factor_base.py │ │ __init__.py │ │ │ ├─factor_calculate │ │ cal_cn_future_cs_1d.py │ │ cal_cn_future_ts_1d.py │ │ cal_factor_base.py │ │ __init__.py │ │ │ ├─factor_define │ │ cn_future_cs_1d_mom.py │ │ cn_future_ts_1d_mom.py │ │ __init__.py │ │ │ ├─factor_operator │ │ cs_operator.py │ │ ts_operator.py │ │ __init__.py │ │ │ └─factor_process │ __init__.py │ ├─position │ │ position_base.py │ │ __init__.py │ │ │ ├─position_calculate │ │ cal_cn_future_cs_1d.py │ │ cal_position_base.py │ │ __init__.py │ │ │ └─position_process │ process_position.py │ __init__.py │ ├─research │ │ __init__.py │ │ │ ├─backtest │ │ │ backtest.py │ │ │ statistics.py │ │ │ __init__.py │ │ │ ├─models │ │ predict_model.py │ │ train_model.py │ │ __init__.py │ ├─signal │ │ signal_base.py │ │ __init__.py │ │ │ ├─signal_calculate │ │ cal_cn_future_cs_1d.py │ │ cal_signal_base.py │ │ __init__.py │ │ │ ├─signal_portfolio │ │ cal_portfolio_weight.py │ │ __init__.py │ │ │ └─signal_process │ process_signal.py │ __init__.py │ ├─trader │ __init__.py │ ├─utils │ │ __init__.py │ │ │ ├─database │ │ ck_control.py │ │ dk_control.py │ │ __init__.py │ │ │ ├─exception │ │ error.py │ │ __init__.py │ │ │ ├─tool │ │ add_sys_path.py │ │ configer.py │ │ datetime_wrangle.py │ │ decorator.py │ │ email.py │ │ freeze_requirement.py │ │ logger.py │ │ requirements.txt │ │ __init__.py │ │ │ ├─visualization │ │ │ plot.py 🚀 使用说明 第一步：克隆仓库 确保服务器安装了 Git,否则需要先 安装 git 命令安装软件： git clone https://github.com/jiangtiantu/quanthub.git 如果因为网络问题无法连接,可以使用国内镜像仓库,但是镜像仓库会有 30 分钟的延迟： git clone https://gitee.com/jiangtiantu/quanthub.git 或者直接点击项目右上角下载； 第二步：构建你的想法 根据你的经验,你的猜测,提出一个可能的投研思路,一个研究和交易的方向。 如果你没有任何想法,可以先看看paperhub中的资料,找找灵感 第三步：获取数据 查看datahub面板数据,根据你的思路,选取你需要的数据。 第四步：打开投研DEMO,享受你的量化之旅 在researhub里有为你准备好的大量投研demo,请查看reasearhub 第五步：将数据转化为因子 正常情况下,先做单因子分析 如果已经有很成熟的因子库了,走factor,signal 批量生成和转化,将数据存放到factorhub,signalhub 第六步：将因子转化为实际交易的仓位 这里会涉及到因子组合和信号组合两个问题,确定自己需要怎样的组合方式,将结果输出到positionhub 第七步：选择喜欢的合适的交易框架 看看tradehub 中有没有你喜欢的交易框架,尽量少造轮子呀 当然,非常欢迎大佬提交自己的框架,多多宜善 第八步：评估分析,优化提高 一个循环... 📝 升级打怪之路 ok,走过了上面的流程,你已经掌握了量化投资的基本套路了。 接下来,或自己,或和小伙伴,开启新的升级打怪之路了!!!! 这个行业真的是太jer卷了,例如期货市场,本质上就是一个零和博弈的市场。 在这个赌场里,如果你不能跟随市场成长和进化,那么你就是那只被抓的🐟🐋🐳🐬； 如果你不知道怎么避免成为一个韭菜,那么你就是那个韭菜！ 所以,做好一直卷下去的准备吧； 如果你准备好了,那就去尝试吧,每次失败的经验,都将帮助你逼近那些正确的方向！ 但一定一定,切记,投资有风险,入市需谨慎；活下来,比什么都重要！ # 生活不易,猫猫叹气,加油(ง •_•)ง！ 🤝 参与共建 要做的东西太多了,本项目应该会处于长期快速迭代更新； 我们欢迎所有的贡献者,也期待能结识更多金融圈开源小伙伴,你可以将任何想法作为 pull requests 或 GitHub issues 提交。关于代码如果有任何疑惑的地方,可以先看下,name_rule是否能解决问题。顺颂商祺 :) powered by Gitbook修订时间： 2022-06-17 13:45:52 "},"quanthub.html":{"url":"quanthub.html","title":"quanthub简介","keywords":"","body":"quanthub简介 报告问题 · 功能需求 一个轻量清晰,容易上手的,数据/投研/交易集成框架 🐼QuantHub简介(持续更新调整中ing) 首先 QuantHub 是个圈地自萌的小社区,里面的人个个是人才,长得好看(❤´艸｀❤),说话又好听。 其次 quanthub 是个体验感很好的量化集成框架,目前开源的是实际生产环境的一个简化版本,几乎涵盖了（数据/投研/组合/交易/分析）所有环节。 它足够简单,足够自由,你可以像搭积木一样,搭配自己喜欢的技术栈,让它成为最适合你的开发利器！ 它的架构肯定是没有问题的,几乎可以说是很标准了,搭配合适的技术栈,是可以成为一个企业级的框架的； 最后,感谢这两年多来,不断支持 QuantHub项目成长,给予帮助和建议的朋友🍑🍑🍑~ 项目地址： https://gitee.com/jiangtiantu/quanthub 文档地址： http://jiangtiantu.gitee.io/quanthub ✨ 工具特性 自由,自由,还是***D 自由,你可以随心所欲的魔改 DIY,可扩展,可升级； 简单,简单,足够轻松上手的简单,这是一整套完整的体系,来源于实际的各生产环节； 💻 项目结构 quanthub包含以下几个部分（请原谅我是个取名废材,o(////▽////)q）： datahub 这是一个落地数据库,你可以直接把你想要的数据放到本地,并通过data_sync进行每日同步更新。 储存形式任意,你可以按照自己的喜好进行选择,目前我实际生产环境用的clickhouse+parquet+duckdb； 该数据库包含：股票,期货,期权,基金的历史行情数据,以及相应的实时数据； 数据的ETL相关代码,请查阅plutus.data 模块 该数据库还包含,各种另类数据和基本面数据,具体内容,请查看datahub 文档； factorhub 这是落地一个因子数据库,可以是你喜欢的任意形式,为方便上传,该项目采用的parquet文件存储； 也是一个因子回测框架,包含截面因子回测和时序因子回测两大类； 投研环境下,相关回测逻辑,请阅读plutus.research模块 生产环境下,批量计算因子,请查看plutus.factor模块 因子面板(更新中); 一个因子交换和交流平台(目前是以微信群的方式),有想加入的小伙伴,请私下联系； 具体内容说明,请查看factorhub文档； signalhub 这是落地一个信号数据库,是对因子数据的进一步处理,可以是你喜欢的任意形式,为方便上传,该项目采用的parquet文件存储； 生产环境下,批量计算信号,请查看plutus.signal 模块 交易信号面板(更新中); 大部分人可能用不到这个模块,如果不需要篮子交易的话； 具体内容说明,请查看signalhub文档； positionhub 这是落地一个账户持仓数据库,是对信号数据的进一步处理,可以是你喜欢的任意形式； 生产环境下,批量计算信号,请查看plutus.position模块 大部分人可能用不到这个模块,如果不需要篮子交易,或者需要多账户交易的话； 具体内容说明,请查看positionhub文档； researhub 投研平台,本质是jupyter lab； 我对该模块的定义是存放,我们数据分析的各类notebook文件,以及各种测试代码； 具体内容说明,请查看researhub文档；paperhub 一个放资料的地方,包含各类视频和各种PDF等等文件,几乎你能在互联网上找到的所有可能有点用的学习资料 资料总大小大概200g 左右,分类如下： 股票 基金 期货 期权 资产配置 高频 债券 具体内容说明,请查看paperhub文档； tradehub 关于交易,我们的理念是,不同标的,不同策略,可能需要的交易框架是不一样的。你喜欢的,适合的就是最好的； 所以,我们直接集成了一些优秀的开源交易框架： wondertrader ctpbee fk_ctp 期待能与更多的开源框架作者建立联系,感谢你们为开源社区做出的贡献~ 具体内容说明,请查看tradehub文档；jobhub 一个方便同行进行招聘与求职的板块 目前是和以下金融ip小伙伴,同步更新,微信公众号,知乎等等自媒体； FOF小菜鸟； 期待能与更多的金融自媒体和IP建立联系 具体内容说明,请查看jobhub文档； gamehub 一个业内朋友一起打游戏的板块； 具体内容说明,请查看gamehub文档； lovehub 一个征婚交友的地方； 具体内容说明,请查看lovehub文档； plutus（核心） plutus是另外一个小伙伴给起的名字，翻译为财神爷，哈哈，是不是凭这个就该关注下了呢 后台框架,该项目核心,分为以下模块和文件: ├─data │ │ data_base.py │ │ __init__.py │ │ │ ├─data_backup │ │ backup_data.py │ │ __init__.py │ │ │ ├─data_download │ │ download_base.py │ │ download_from_bs.py │ │ download_from_ctp.py │ │ download_from_sge.py │ │ __init__.py │ │ │ ├─data_prepare │ │ prepare_base.py │ │ prepare_center_data.py │ │ prepare_his_parquet.py │ │ prepare_rt_redis.py │ │ __init__.py │ │ │ ├─data_pretreat │ │ pretreat_base.py │ │ pretreat_from_bs.py │ │ pretreat_from_diy.py │ │ __init__.py │ │ │ ├─data_process │ │ process_base.py │ │ process_cn_future_index.py │ │ process_cn_future_md.py │ │ process_cn_future_master.py │ │ process_cn_future_trade.py │ │ process_cn_stock_master.py │ │ process_cn_stock_trade.py │ │ process_sg_future_md.py │ │ __init__.py │ │ │ ├─data_sync │ │ __init__.py │ │ sync_base.py │ │ sync_data.py │ │ │ ├─data_update │ │ update_base.py │ │ update_data.py │ │ __init__.py │ │ │ └─data_wrangle │ resample_data.py │ standard_data.py │ __init__.py │ ├─execution │ cal_factor.bat │ cal_signal.bat │ run_prepare_data.bat │ run_update_data.bat │ ├─factor │ │ factor_base.py │ │ __init__.py │ │ │ ├─factor_calculate │ │ cal_cn_future_cs_1d.py │ │ cal_cn_future_ts_1d.py │ │ cal_factor_base.py │ │ __init__.py │ │ │ ├─factor_define │ │ cn_future_cs_1d_mom.py │ │ cn_future_ts_1d_mom.py │ │ __init__.py │ │ │ ├─factor_operator │ │ cs_operator.py │ │ ts_operator.py │ │ __init__.py │ │ │ └─factor_process │ __init__.py │ ├─position │ │ position_base.py │ │ __init__.py │ │ │ ├─position_calculate │ │ cal_cn_future_cs_1d.py │ │ cal_position_base.py │ │ __init__.py │ │ │ └─position_process │ process_position.py │ __init__.py │ ├─research │ │ __init__.py │ │ │ ├─backtest │ │ │ backtest.py │ │ │ statistics.py │ │ │ __init__.py │ │ │ ├─models │ │ predict_model.py │ │ train_model.py │ │ __init__.py │ ├─signal │ │ signal_base.py │ │ __init__.py │ │ │ ├─signal_calculate │ │ cal_cn_future_cs_1d.py │ │ cal_signal_base.py │ │ __init__.py │ │ │ ├─signal_portfolio │ │ cal_portfolio_weight.py │ │ __init__.py │ │ │ └─signal_process │ process_signal.py │ __init__.py │ ├─trader │ __init__.py │ ├─utils │ │ __init__.py │ │ │ ├─database │ │ ck_control.py │ │ dk_control.py │ │ __init__.py │ │ │ ├─exception │ │ error.py │ │ __init__.py │ │ │ ├─tool │ │ add_sys_path.py │ │ configer.py │ │ datetime_wrangle.py │ │ decorator.py │ │ email.py │ │ freeze_requirement.py │ │ logger.py │ │ requirements.txt │ │ __init__.py │ │ │ ├─visualization │ │ │ plot.py 🚀 使用说明 第一步：克隆仓库 确保服务器安装了 Git,否则需要先 安装 git 命令安装软件： git clone https://github.com/jiangtiantu/quanthub.git 如果因为网络问题无法连接,可以使用国内镜像仓库,但是镜像仓库会有 30 分钟的延迟： git clone https://gitee.com/jiangtiantu/quanthub.git 或者直接点击项目右上角下载； 第二步：构建你的想法 根据你的经验,你的猜测,提出一个可能的投研思路,一个研究和交易的方向。 如果你没有任何想法,可以先看看paperhub中的资料,找找灵感 第三步：获取数据 查看datahub面板数据,根据你的思路,选取你需要的数据。 第四步：打开投研DEMO,享受你的量化之旅 在researhub里有为你准备好的大量投研demo,请查看reasearhub 第五步：将数据转化为因子 正常情况下,先做单因子分析 如果已经有很成熟的因子库了,走factor,signal 批量生成和转化,将数据存放到factorhub,signalhub 第六步：将因子转化为实际交易的仓位 这里会涉及到因子组合和信号组合两个问题,确定自己需要怎样的组合方式,将结果输出到positionhub 第七步：选择喜欢的合适的交易框架 看看tradehub 中有没有你喜欢的交易框架,尽量少造轮子呀 当然,非常欢迎大佬提交自己的框架,多多宜善 第八步：评估分析,优化提高 一个循环... 📝 升级打怪之路 ok,走过了上面的流程,你已经掌握了量化投资的基本套路了。 接下来,或自己,或和小伙伴,开启新的升级打怪之路了!!!! 这个行业真的是太jer卷了,例如期货市场,本质上就是一个零和博弈的市场。 在这个赌场里,如果你不能跟随市场成长和进化,那么你就是那只被抓的🐟🐋🐳🐬； 如果你不知道怎么避免成为一个韭菜,那么你就是那个韭菜！ 所以,做好一直卷下去的准备吧； 如果你准备好了,那就去尝试吧,每次失败的经验,都将帮助你逼近那些正确的方向！ 但一定一定,切记,投资有风险,入市需谨慎；活下来,比什么都重要！ # 生活不易,猫猫叹气,加油(ง •_•)ง！ 🤝 参与共建 要做的东西太多了,本项目应该会处于长期快速迭代更新； 我们欢迎所有的贡献者,也期待能结识更多金融圈开源小伙伴,你可以将任何想法作为 pull requests 或 GitHub issues 提交。关于代码如果有任何疑惑的地方,可以先看下,name_rule是否能解决问题。顺颂商祺 :) powered by Gitbook修订时间： 2022-06-17 14:43:40 "},"name_rule.html":{"url":"name_rule.html","title":"name_rule","keywords":"","body":"命名规范 ETL流程规则： 1. download* 对应raw_data,只改trading_date(若有)这一个字段,其他不做任何数据上的调整。以文件的形式存储到本地磁盘; 2. pretreat* 修改数据类型,字段重命名,添加新字段,存储到clickhouse 3. process* 根据现在的数据表产生新的数据,比如指数数据,存储到clickhouse 4. commercial* 对数据进行选择,是最终数据的集合,存储到clickhouse 5. get:获取一个数据,放在内存中; 6. save:从内存中,把处理过的数据,保存到本地; 7. import: 指第一次把数据导入数据库; 8. export: 把数据从数据库中导出为文件 命名大小写规则: 1. 特定字段,symbol,method大写; 2. 常量大写 3. 数据源全为小写 4. 类,用大驼峰命名法,每个单词首字母大写; 5. 其他函数或者变量,用下划线命名法,必须小写; 6. comercial数据库,字段名全为小写 命名缩写规则： 1. 自己做的数据叫做diy,其他的数据源为缩写 2. sh 表示上海交易所,sz 表示深圳交易所 3. 数据字段尽量不要出现缩写 4. 时间表达方式如下: 1y,1m,1d,1h,1m,1s 5. 所有命名单词用下划线隔开,都是单数形式,尽量全拼,不要缩写 6. 复杂变量名,用其数据类型作结尾,比如: trading_date_info_s 特殊命名规则： 1. path 表示文件路径,dir表示文件夹路径; 2. database代表mongo,clickhouse,mysql等等数据库;db代表具体的数据库名称 3. tb:table db: database dt: date dtt: datetime rt：realtime his：history cal:calculate hs300:hs300指数 4. code,如510300,trade_code:如510300.sh 5. 所有字段名字统一,具有特定的意思,比如symbol /contract,默认所有的contract为symbol+4位数字；code/trade_code 数据存储类型规则： 1. trading_date和datetime 数据类型都是datetime64 2. 在把数据写到raw_data 里面时,原有的date,day 等表示日期的字段不动,数据类型也不动。自行添加trading_date字段 3. 默认所有从数据库取出的所有数据都是DataFrame,不做sort操作 代码规范 1. 代码用black格式化 2. 代码模块化,少造轮子 3. 注释用 :param 4. 字符串拼接用f\"{xxx}\" 5. 函数尽量写成传参数的方式 powered by Gitbook修订时间： 2022-06-15 18:19:38 "},"datahub.html":{"url":"datahub.html","title":"datahub","keywords":"","body":"datahub 简介 datahub 是一个基于 Python 的金融数据工具包。提供落地历史数据库和实时数据。 目前数据的获取有两种方案： 直接通过网盘下载,数据放在datahub目录中，适合只是做点尝试和测试的同学 通过 Rsync 从远程服务器拉取数据,定时同步数据(只面向参与项目共建的小伙伴和付费用户) 研究数据下载地址： 链接: https://pan.baidu.com/s/1nCZIXFtG7Hoe7OvXs1uknA?pwd=n2ru 提取码: n2ru 数据存储格式为parquet，使用方式请查看pyarrow 或者 researchub 中的案例。 实时交易数据： 如有需求，请小窗联系，email:qiwu12@qq.com datahub 提供的每日更新的数据包括： 国内数据： 期货数据/future 主数据/master 交易日信息/trading_date_info 字段 数据类型 含义 trading_date DateTime64(3) 交易日 商品信息/symbol_info 字段 数据类型 含义 symbol String 交易品种 multiplier Int64 合约乘数 exchange_tq String 天勤交易所合约代码 exchange_ctp String ctp交易所合约代码 合约信息/contract_info 字段 数据类型 含义 contract String 合约名称 symbol String 交易品种 exchange String 交易所代码 multiplier Float64 合约乘数 trading_hour String 交易时间段 listing_date DateTime64(3) 上市日期 delisting_date DateTime64(3) 退市日期 行情数据/md 日行情数据/all_1d 字段 数据类型 含义 trading_date DateTime64(3) 交易日 symbol String 交易品种 contract String 合约名称 open_interest Float64 持仓量 close Float64 收盘价 open Float64 开盘价 turnover Float64 成交额 pre_settlement Float64 昨日结算价 settlement Float64 结算价 down_limit Float64 跌停价 high Float64 最高价 up_limit Float64 涨停价 volume Float64 成交量 low Float64 最低价 pre_close Float64 昨日收盘价 主力合约切换表/main_roll_calendar 字段 数据类型 含义 trading_date DateTime64(3) 交易日 symbol String 交易品种 o_m String 当日主力合约,按照持仓量最大选择,单调,切换主力合约后,不再考虑旧主力合约 o_nm String 当日主力合约,按照持仓量最大选择,非单调,切换主力合约后,仍然考虑旧主力合约 v_m String 当日主力合约,按照成交量最大选择,单调,切换主力合约后,不再考虑旧主力合约 v_nm String 当日主力合约,按照成交量最大选择,非单调,切换主力合约后,仍然考虑旧主力合约 切片行情数据/throttled_data 30分钟数据/all_30m 字段 数据类型 含义 trading_date DateTime64(3) 交易日 symbol String 交易品种 contract String 合约名称 open_interest Float64 持仓量 close Float64 收盘价 open Float64 开盘价 turnover Float64 成交额 volume Float64 成交量 low Float64 最低价 5分钟数据/all_5m 字段 数据类型 含义 trading_date DateTime64(3) 交易日 symbol String 交易品种 contract String 合约名称 open_interest Float64 持仓量 close Float64 收盘价 open Float64 开盘价 turnover Float64 成交额 volume Float64 成交量 low Float64 最低价 1分钟数据/all_1m 字段 数据类型 含义 trading_date DateTime64(3) 交易日 symbol String 交易品种 contract String 合约名称 open_interest Float64 持仓量 close Float64 收盘价 open Float64 开盘价 turnover Float64 成交额 volume Float64 成交量 low Float64 最低价 tick数据(2笔/s)/all_tick 字段 数据类型 含义 trading_date DateTime64(3) 交易日 datetime DateTime64(3) 交易时间 symbol String 交易品种 contract String 合约名称 open Float64 开盘价 high Float64 最高价 low Float64 最低价 pre_close Float64 昨日收盘价 open_interest Float64 持仓量 pre_settlement Float64 昨日结算价 settlement Float64 结算价 turnover Float64 成交额 volume Float64 成交量 up_limit Float64 涨停价 down_limit Float64 跌停价 last_price Float64 收盘价 bid_price1 Float64 买一价 bid_vol1 Float64 买一量 ask_price1 Float64 卖一价 ask_vol1 Float64 卖一量 bid_price2 Float64 买二价 bid_vol2 Float64 买二量 ask_price2 Float64 卖二价 ask_vol2 Float64 卖二量 bid_price3 Float64 买三价 bid_vol3 Float64 买三量 ask_price3 Float64 卖三价 ask_vol3 Float64 卖三量 bid_price4 Float64 买四价 bid_vol4 Float64 买四量 ask_price4 Float64 卖四价 ask_vol4 Float64 卖四量 bid_price5 Float64 买五价 bid_vol5 Float64 买五量 ask_price5 Float64 卖五价 ask_vol5 Float64 卖五量 委托信息/quote_data orderbook逐笔委托数据 具体到某个账户的订单数据 交易数据/trade 期货会员持仓数据/memeber_position_info 字段 数据类型 含义 字段 数据类型 含义 trading_date DateTime64(3) 交易日 contract String 合约名称 rank_type String 排名方式 rank_value int64 排名序号 member_name String 会员名称 member_open_interest String 会员持仓 member_open_interest_change Int64 会员持仓变化 大客户持仓数据 指数数据/index 大宗商品指数 blablabla ~ 另类数据/alternative 交割库存数据 字段 数据类型 含义 trading_date DateTime64(3) 交易日 symbol String 交易品种 warehouse_name String 交割仓库名 warehouse_receipt_number int64 库存 unit String 单位 warehouse_receipt_number_change Float64 库存变化 现货价格数据 现货库存数据 现货上下游数据 股票数据/stock 主数据/master 交易日信息/trading_date_info 字段 数据类型 含义 trading_date DateTime64(3) 交易日 上市公司的基本信息/code_info 字段 数据类型 含义 code String 证券代码 trading_date DateTime64(3) 交易日 name String 证券名称 exchange String 交易所 listing_date String 上市日期 delisting_date String 退市日期 上市公司的分类信息 中信二级行业分类 股票交易所的基本规则 行情数据/md 日行情数据/all_1d 字段 数据类型 含义 trading_date DateTime64(3) 交易日期 code String 证券代码 high Float64 最高价 open Float64 开盘价 low Float64 最低价 close Float64 收盘价 volume Float64 成交量 turnover Float64 成交额 trade_num Float64 交易笔数 pre_close Float64 昨日收盘价 up_limit Float64 涨停价 down_limit Float64 涨停价 复权因子数据/adjust_factor 字段 数据类型 含义 divid_operate_date DateTime64(3) 除权日 code String 证券代码 qfq_factor Float64 前复权因子 hfq_factor Float64 后复权因子 切片行情数据/throttled_data 30分钟数据/all_30m 字段 数据类型 含义 trading_date DateTime64(3) 交易日期 code String 证券代码 high Float64 最高价 open Float64 开盘价 low Float64 最低价 close Float64 收盘价 volume Float64 成交量 turnover Float64 成交额 trade_num Float64 交易笔数 5分钟数据/all_5m 字段 数据类型 含义 trading_date DateTime64(3) 交易日期 code String 证券代码 high Float64 最高价 open Float64 开盘价 low Float64 最低价 close Float64 收盘价 volume Float64 成交量 turnover Float64 成交额 trade_num Float64 交易笔数 1分钟数据/all_1m 字段 数据类型 含义 trading_date DateTime64(3) 交易日期 code String 证券代码 high Float64 最高价 open Float64 开盘价 low Float64 最低价 close Float64 收盘价 volume Float64 成交量 turnover Float64 成交额 trade_num Float64 交易笔数 tick数据(2笔/s)/all_tick 字段 数据类型 含义 trading_date DateTime64(3) 交易日 datetime DateTime64(3) 交易时间 code String 股票代码 open Float64 开盘价 high Float64 最高价 low Float64 最低价 pre_close Float64 昨日收盘价 turnover Float64 成交额 volume Float64 成交量 up_limit Float64 涨停价 down_limit Float64 跌停价 last_price Float64 收盘价 bid_price1 Float64 买一价 bid_vol1 Float64 买一量 ask_price1 Float64 卖一价 ask_vol1 Float64 卖一量 bid_price2 Float64 买二价 bid_vol2 Float64 买二量 ask_price2 Float64 卖二价 ask_vol2 Float64 卖二量 bid_price3 Float64 买三价 bid_vol3 Float64 买三量 ask_price3 Float64 卖三价 ask_vol3 Float64 卖三量 bid_price4 Float64 买四价 bid_vol4 Float64 买四量 ask_price4 Float64 卖四价 ask_vol4 Float64 卖四量 bid_price5 Float64 买五价 bid_vol5 Float64 买五量 ask_price5 Float64 卖五价 ask_vol5 Float64 卖五量 委托信息/quote_data orderbook逐笔委托数据 具体到某个账户的订单数据 交易数据/trade 股票每日资金流入流出数据 股票融资融券数据 公募基金持仓数据 私募基金持仓数据 沪深港通每日额度数据 北向资金持仓明细数据 北向资金实时资金流向 龙虎榜数据 指数数据/index 指数成分/index_component_info 字段 数据类型 含义 trading_date String 交易日期 code String 证券代码 code_name String 证券名称 index_code String 指数名称 2. 指数行情 3. 升贴水数据 中证500指数 成分股每日权重 指数价格 升贴水数据 上证50指数 行业指数 另类数据/alternative 上市公司财务信息 上市公司公告/快报 上市公司分红数据 大宗交易信息 十大流通股东信息 十大股东信息 热点/舆情信息 电商数据 新闻分析数据 基金数据/fund 主数据/master 各公募基金的基本信息 基金风格/类型数据 行情数据/md 日数据/daily_data 每日净值数据 每日规模数据 交易数据/trade 1.基金持仓信息 另类数据/alternative 基金评级信息 基金费率信息 期权数据/option 主数据/master 期权合约基本信息 行情数据/md 日行情数据/daily_data 切片行情数据/throttled_data 30分钟数据/min30 5分钟数据/min5 1分钟数据/min1 tick数据(2笔/s) 委托信息/quote_data orderbook逐笔委托数据 债券数据/bond 银行间拆借利率 新加坡数据： 期货数据/future 主数据/master 商品期货的基本信息 交易所的基本规则 行情数据/md 日行情数据/daily_data 指数数据/index 大宗商品指数 blablabla ~ 国际数据： 加密货币数据 主数据/master 商品期货的基本信息 交易所的基本规则 行情数据/md 日行情数据/daily_data 切片行情数据/throttled_data 30分钟数据/min30 5分钟数据/min5 1分钟数据/min1 tick数据(2笔/s) 委托信息/quote_data orderbook逐笔委托数据 具体到某个账户的订单数据 宏观经济数据 外汇数据 powered by Gitbook修订时间： 2022-06-15 18:19:38 "},"paperhub.html":{"url":"paperhub.html","title":"paperhub","keywords":"","body":"paperhub 一个放资料的地方,包含各类视频和各种PDF等等文件,几乎你能在互联网上找到的所有可能有点用的学习资料 资料总大小大概200g 左右,分类如下： PDF各类文档： 股票 基金 期货 期权 高频 债券 资产配置 下载地址：ttps://www.aliyundrive.com/s/9FaFAbS5SEA 提取码: qu20 视频等学习资料： blablabla 如需要更多内容,请小窗联系 powered by Gitbook修订时间： 2022-06-15 18:19:38 "},"researchub.html":{"url":"researchub.html","title":"researchub","keywords":"","body":"researchub 这是一个投研平台,本质是jupyter lab； 我对该模块的定义是存放,我们数据分析的各类notebook文件,以及各种测试代码,相关回测逻辑,请阅读plutus.research模块； 目前有如下demo: ├─0 Build Ideas │ quantization.emmx │ ├─1 Data │ ├─data_collection │ │ export_data_from_clickhouse_to_arrow.ipynb │ │ export_data_from_clickhouse_to_parquet.ipynb │ │ export_data_from_clickhouse_to_parquet_by_sql.ipynb │ │ import_data_from_parquet_to_clickhouse.ipynb │ │ │ └─data_wrangling │ │ alter_raw_data_clickhouse.ipynb │ │ commercial_data_to_clickhouse.ipynb │ │ download_data_to_parquet.ipynb │ │ drop_duplicate_data_clickhouse.ipynb │ │ pretreat_data_to_clickhouse.ipynb │ │ proccess_data_to_clickhouse.ipynb ├─3 Research │ ├─cross_section_factor_analysis │ │ cs_factor_analysis_demo.ipynb │ │ ├─investment_portfolio │ │ factor_portfolio_analysis.ipynb │ │ investment_portfolio_analysis.ipynb │ │ signal_portfolio_analysis.ipynb │ │ │ └─time_series_factor_analysis │ example.ipynb │ ts_factor_daily_demo. │ ts_factor_min_demo.ipynb │ └─5 Trader and Oversight ​ 单因子分析流程（供参考） 引入相应模块 # coding: utf-8 import pandas as pd import numpy as np from plutus.research.backtest.backtest import BacktestCS from plutus.utils.visualization.plot import PlotCS np.set_printoptions(suppress=True) pd.set_option('display.float_format', lambda x: '%.5f' % x) 读取数据 datapath='../../../datahub/raw/cn/stock/md/all_1d.parquet' data_bfq=pd.read_parquet(datapath) 对数据进行基本的处理 open_ = data_bfq[\"open\"].unstack() close = data_bfq[\"close\"].unstack() high = data_bfq[\"high\"].unstack() low = data_bfq[\"low\"].unstack() vol = data_bfq[\"volume\"].unstack() amount = data_bfq[\"turnover\"].unstack() #去除涨跌停,去除停牌股 # tradeable=data_bfq['amount'].apply(lambda x :1 if x>0 else np.nan)*(data_bfq['high']-data_bfq['low']).apply(lambda x :1 if x!=0 else np.nan)*chg_1_d.stack().apply(lambda x :1 if x 定义一个因子 def factor_simple(): factor=-1*Close.pct_change(5) return factor test_factor=factor_simple() 计算factor_rank backtest_cs= BacktestCS() clean_factor_data= backtest_cs.cal_factor_rank(meta_data,test_factor) 计算fator_quantile clean_factor_data= backtest_cs.cal_factor_quantile(clean_factor_data,group_num=20) 选择自己需要的hold_portfolio long_portfolio_data, short_portfolio_data =backtest_cs.cal_hold_portfolio(clean_factor_data, hold_num= 1) 计算标的权重,可以自己拟定 portfolio_data = backtest_cs.cal_portfolio_weight(long_portfolio_data) 计算回测指标 ret_df, sharpe_ratio, annual_return, max_down= backtest_cs.describer_01(long_portfolio_data,short_portfolio_data) 画出分组累计收益 PlotCS.plot_group_cumsum_pnl(clean_factor_data) 画出long-short多空收益 ret_df.plot(figsize=(16, 9), title=\"test\") 基本上你自己定义一个因子,之后就直接开始研究了。我这个框架是学习alphalens写的,因为alphalens 太慢了,所以,就自己实现了,要快些。没有做任何封装,理解起来容易些。所有曲线没有计算手续费,没有计算对冲成本。 ​ 投资组合流程（供参考） 引入相应模块 # coding: utf-8 import plutus.research.backtest.backtest as ba import pandas as pd import numpy as np import empyrical as empl import matplotlib.pyplot as plt from plutus.portfolio.portfolio_cal.portfolio_base import PortfolioBase backtest_cs=ba.BacktestCS() portfolio_base =PortfolioBase() 读取行情数据 all_1d_df = pd.read_parquet(\"../../../datahub/raw/cn/stock/md/all_1d.parquet\") all_1d_df.set_index([\"trading_date\", \"code\"], inplace=True) all_1d_df['ret_1d']= all_1d_df['close']/all_1d_df['pre_close']-1 all_1d_df.head() 读取signal数据 all_1d_df = pd.read_parquet(\"../../../datahub/raw/cn/stock/md/all_1d.parquet\") all_1d_df.set_index([\"trading_date\", \"code\"], inplace=True) all_1d_df['ret_1d']= all_1d_df['close']/all_1d_df['pre_close']-1 all_1d_df.head() 计算每日收益 all_pnl_1d_df = all_signal_df.groupby(['name','trading_date'])['pnl_1d'].mean() all_pnl_1d_df=all_pnl_1d_df.unstack().T all_pnl_1d_df.dropna(inplace=True) all_pnl_1d_df.head() 筛选出需要的因子(有未来数据) calmar_ratio_df= portfolio_base.cal_calmar_ratio(all_pnl_1d_df) select_s = np.where(abs(calmar_ratio_df)>0.5,1,np.nan) selected_pnl_1d_df = all_pnl_1d_df.mul(select_s,axis=1) 计算因子组合权重(有未来数据) portfolio_weight_s = portfolio_base.cal_weight(selected_pnl_1d_df) portfolio_weight_s 计算组合净值收益(有未来数据) net_s = all_pnl_1d_df.mul(portfolio_weight_s).sum(axis=1) net_s.cumsum().plot() powered by Gitbook修订时间： 2022-06-15 18:19:38 "},"factorhub.html":{"url":"factorhub.html","title":"factorhub","keywords":"","body":"factorhub factorhub包含以下部分： 因子数据库； 这个数据库可以是你喜欢的任意形式,为方便上传,该项目采用的parquet文件存储； 投研环境下,相关因子检验,请阅读plutus.research模块 生产环境下,批量计算因子,请查看plutus.factor模块 因子面板(更新中); 一个因子交换和交流平台(目前是以微信群的方式); 有想加入的小伙伴,请私下联系； powered by Gitbook修订时间： 2022-06-15 18:19:38 "},"signalhub.html":{"url":"signalhub.html","title":"signalhub","keywords":"","body":"signalhub powered by Gitbook修订时间： 2022-06-15 18:19:38 "},"tradehub.html":{"url":"tradehub.html","title":"tradehub","keywords":"","body":"tradehub 关于交易,我们的理念是,不同标的,不同策略,可能需要的交易框架是不一样的。你喜欢的,适合的就是最好的； 所以,我们直接集成了一些优秀的开源交易框架： wondertrader ctpbee fk_ctp 期待能与更多的开源框架作者建立联系,感谢你们为开源社区做出的贡献~ powered by Gitbook修订时间： 2022-06-15 18:19:38 "},"lovehub.html":{"url":"lovehub.html","title":"lovehub","keywords":"","body":"Lovehub 是一个金融圈婚恋交友社区,目前和一些专业的狐妖小红娘小范围尝试合作中~ powered by Gitbook修订时间： 2022-06-15 18:19:38 "},"jobhub.html":{"url":"jobhub.html","title":"jobhub","keywords":"","body":"jobhub 一个方便业内同仁进行招聘与求职的板块 目前是和以下金融ip小伙伴,同步更新,微信群,微信公众号,知乎等等自媒体； 同步更新的金融ip小伙伴有： quanthub（知乎，gitee,github） 浪说量化（微信公众号） 期待能与更多的金融自媒体和IP建立联系 如需招聘,您可以发送jd到email：jiangtiantu@hotmail.com 如需求职,您可以发简历到email：jiangtiantu@hotmail.com 如需职业规划,职业建议,请联系wechat：jtt_xm 方案一(付费)：会帮助咨询者邀请一位资深猎头+一位业内老兵,以电话会议的方式，专业答疑，不满意，退全款 方案二(free):随缘聊天，看缘分（蛤蛤） 以及建立一个白名单,如果xdm觉得自己东家还很不错的话,就把公司名字提交到名单中吧； powered by Gitbook修订时间： 2022-06-15 18:19:38 "},"gamehub.html":{"url":"gamehub.html","title":"gamehub","keywords":"","body":"gamehub 一个通过组织打游戏,爬山等活动,打破社交圈的小板块。 目前是以微信群的形式存在,由小伙伴们自发组织活动,还没有想到更好的载体/(ㄒoㄒ)/~~； 线上活动： 王者荣耀 LOL 动物森林 原神 吃鸡战场 线下活动： 德州扑克 麻将 酒酒酒 剧本杀 狼人杀 登山 潜水/冲浪 小龙虾 powered by Gitbook修订时间： 2022-06-15 18:19:38 "}}